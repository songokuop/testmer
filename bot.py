from dotenv import load_dotenv

load_dotenv(
    "config.env",
    override=True,
)
import asyncio
import os
import shutil
import time

import psutil
import pyromod
from PIL import Image
from pyrogram import Client, filters,enums
from pyrogram.errors import (
    FloodWait,
    InputUserDeactivated,
    PeerIdInvalid,
    UserIsBlocked,
)
from pyrogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
    User,
)

from __init__ import (
    AUDIO_EXTENSIONS,
    BROADCAST_MSG,
    LOGGER,
    MERGE_MODE,
    SUBTITLE_EXTENSIONS,
    UPLOAD_AS_DOC,
    UPLOAD_TO_DRIVE,
    VIDEO_EXTENSIONS,
    bMaker,
    formatDB,
    gDict,
    queueDB,
    replyDB,
)
from config import Config
from helpers.database import database
from helpers.forcesub import ForceSub
from helpers.utils import UserSettings, get_readable_file_size, get_readable_time

botStartTime = time.time()
parent_id = Config.GDRIVE_FOLDER_ID


class MergeBot(Client):
    def start(self):
        super().start()
        try:
            self.send_message(chat_id=int(Config.OWNER), text="<b>B·¥è·¥õ s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö .!</b>")
        except Exception as err:
            LOGGER.error("B·¥è·¥è·¥õ ·¥Ä ü·¥á Ä·¥õ “ì·¥Ä…™ ü·¥á·¥Ö! P ü·¥á·¥Äs·¥á s·¥õ·¥Ä Ä·¥õ  ô·¥è·¥õ …™…¥ PM")
        return LOGGER.info("B·¥è·¥õ S·¥õ·¥Ä Ä·¥õ·¥á·¥Ö!")

    def stop(self):
        super().stop()
        return LOGGER.info("B·¥è·¥õ S·¥õ·¥è·¥ò·¥ò·¥á·¥Ö")


mergeApp = MergeBot(
    name=Config.SESSION_NAME,
    api_hash=Config.API_HASH,
    api_id=int(Config.TELEGRAM_API),
    bot_token=Config.BOT_TOKEN,
    workers=300,
    plugins=dict(root="plugins"),
    app_version="5.0+yash-mergebot",
)


if os.path.exists("downloads") == False:
    os.makedirs("downloads")


@mergeApp.on_message(filters.command(["log"]) & filters.user(Config.OWNER_USERNAME))
async def sendLogFile(c: Client, m: Message):
    await m.reply_document(document="./mergebotlog.txt")
    return


'''@mergeApp.on_message(filters.command(["login"]) & filters.private)
async def loginHandler(c: Client, m: Message):
    Fsub = await ForceSub(c, m)
    if Fsub == 400:
        return
    user = UserSettings(m.from_user.id, m.from_user.first_name)
    if user.banned:
        await m.reply_text(text=f"**B·¥Ä…¥…¥·¥á·¥Ö ·¥ús·¥á Ä ·¥Ö·¥á·¥õ·¥á·¥Ñ·¥õ·¥á·¥Ö!**\n  Message Here For Login Key @takinggbot\n\nC·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ: üà≤ @{Config.OWNER_USERNAME}", quote=True)
        return
    if user.user_id == int(Config.OWNER):
        user.allowed = True
    if user.allowed:
        await m.reply_text(text=f"**D·¥è…¥·¥õ s·¥ò·¥Ä·¥ç**\n  ‚ö° Y·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥ç·¥á!!", quote=True)
    else:
        try:
            passwd = m.text.split(" ", 1)[1]
        except:
            await m.reply_text("**C·¥è·¥ç·¥ç·¥Ä…¥·¥Ö:**\n  `/login <password>`\n\n**Us·¥Ä…¢·¥á:**\n  `password`: Ge·¥õ ·¥õ ú·¥á ·¥ò·¥Äss·¥°·¥è Ä·¥Ö “ì Ä·¥è·¥ç ·¥è·¥°…¥·¥á Ä",quote=True,parse_mode=enums.parse_mode.ParseMode.MARKDOWN)
        passwd = passwd.strip()
        if passwd == Config.PASSWORD:
            user.allowed = True
            await m.reply_text(
                text=f"**A·¥Ñ·¥Ñ·¥áss …¢ Ä·¥Ä…¥·¥õ·¥á·¥Ö  ‚úÖ,**\n  ‚ö° N·¥è·¥°  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥ç·¥á!!", quote=True
            )
        else:
            await m.reply_text(
                text=f"**A·¥Ñ·¥Ñ·¥áss ·¥Ö·¥á…¥…™·¥á·¥Ö ‚ùå,**\n  Message Here For Login Key @Movies_Zone_Contact_bot\n\nC·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ: üà≤ @{Config.OWNER_USERNAME}",
                quote=True,
            )
    user.set()
    del user
    return'''


@mergeApp.on_message(filters.command(["stats"]) & filters.private)
async def stats_handler(c: Client, m: Message):
    currentTime = get_readable_time(time.time() - botStartTime)
    total, used, free = shutil.disk_usage(".")
    total = get_readable_file_size(total)
    used = get_readable_file_size(used)
    free = get_readable_file_size(free)
    sent = get_readable_file_size(psutil.net_io_counters().bytes_sent)
    recv = get_readable_file_size(psutil.net_io_counters().bytes_recv)
    cpuUsage = psutil.cpu_percent(interval=0.5)
    memory = psutil.virtual_memory().percent
    disk = psutil.disk_usage("/").percent
    stats = (
        f"<b>‚ï≠„Äå üí†  ô·¥è·¥õ s·¥õ·¥Ä·¥õ…™s·¥õ…™·¥Ñs „Äç</b>\n"
        f"<b>‚îÇ</b>\n"
        f"<b>‚îú‚è≥ B·¥è·¥õ ·¥ú·¥ò·¥õ…™·¥ç·¥á : {currentTime}</b>\n"
        f"<b>‚îúüíæ T·¥è·¥õ·¥Ä ü ·¥Ö…™s·¥ã s·¥ò·¥Ä·¥Ñ·¥á : {total}</b>\n"
        f"<b>‚îúüìÄ T·¥è·¥õ·¥Ä ü ·¥ús·¥á·¥Ö s·¥ò·¥Ä·¥Ñ·¥á : {used}</b>\n"
        f"<b>‚îúüíø T·¥è·¥õ·¥Ä ü “ì Ä·¥á·¥á s·¥ò·¥Ä·¥Ñ·¥á : {free}</b>\n"
        f"<b>‚îúüî∫ T·¥è·¥õ·¥Ä ü ·¥ú·¥ò ü·¥è·¥Ä·¥Ö : {sent}</b>\n"
        f"<b>‚îúüîª T·¥è·¥õ·¥Ä ü ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö : {recv}</b>\n"
        f"<b>‚îúüñ• CPU : {cpuUsage}%</b>\n"
        f"<b>‚îú‚öôÔ∏è RAM : {memory}%</b>\n"
        f"<b>‚ï∞üíø DISK : {disk}%</b>"
    )
    await m.reply_text(text=stats, quote=True)


@mergeApp.on_message(
    filters.command(["broadcast"])
    & filters.private
    & filters.user(Config.OWNER_USERNAME)
)
async def broadcast_handler(c: Client, m: Message):
    msg = m.reply_to_message
    if msg is None:
        await m.reply_text("P ü·¥á·¥Äs·¥á  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ.")
        return
    userList = await database.broadcast()
    len = userList.collection.count_documents({})
    status = await m.reply_text(text=BROADCAST_MSG.format(str(len), "0"), quote=True)
    success = 0
    for i in range(len):
        try:
            uid = userList[i]["_id"]
            if uid != int(Config.OWNER):
                await msg.copy(chat_id=uid)
            success = i + 1
            await status.edit_text(text=BROADCAST_MSG.format(len, success))
            LOGGER.info(f"Message sent to {userList[i]['name']} ")
        except FloodWait as e:
            await asyncio.sleep(e.x)
            await msg.copy(chat_id=userList[i]["_id"])
            LOGGER.info(f"Message sent to {userList[i]['name']} ")
        except InputUserDeactivated:
            await database.deleteUser(userList[i]["_id"])
            LOGGER.info(f"{userList[i]['_id']} - {userList[i]['name']} : D·¥á·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á·¥Ö\n")
        except UserIsBlocked:
            await database.deleteUser(userList[i]["_id"])
            LOGGER.info(
                f"{userList[i]['_id']} - {userList[i]['name']} : B ü·¥è·¥Ñ·¥ã·¥á·¥Ö ·¥õ ú·¥á  ô·¥è·¥õ\n"
            )
        except PeerIdInvalid:
            await database.deleteUser(userList[i]["_id"])
            LOGGER.info(
                f"{userList[i]['_id']} - {userList[i]['name']} : Us·¥á Ä ID …™…¥·¥†·¥Ä ü…™·¥Ö\n"
            )
        except Exception as err:
            LOGGER.warning(f"{err}\n")
        await asyncio.sleep(3)
    await status.edit_text(
        text=BROADCAST_MSG.format(len, success)
        + f"**F·¥Ä…™ ü·¥á·¥Ö: {str(len-success)}**\n\n__ü§ì B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö s·¥ú·¥Ñ·¥áss“ì·¥ú ü ü è__",
    )


@mergeApp.on_message(filters.command(["start"]) & filters.private)
async def start_handler(c: Client, m: Message):
   Fsub = await ForceSub(c, m)
   if Fsub == 400:
        return
   await m.reply_text(
        text=f"H…™ **‚ö° I ·¥Ä·¥ç ·¥Ä “ì…™ ü·¥á/·¥†…™·¥Ö·¥á·¥è ·¥ç·¥á Ä…¢·¥á Ä  ô·¥è·¥õ\n\nüòé I ·¥Ñ·¥Ä…¥ ·¥ç·¥á Ä…¢·¥á ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç “ì…™ ü·¥ás!, ·¥Ä…¥·¥Ö ·¥ú·¥ò ü·¥è·¥Ä·¥Ö …™·¥õ ·¥õ·¥è ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç Bot Owner @Movies_Zone_Media\n\n/help “ì·¥è Ä  ú·¥è·¥° ·¥õ·¥è ·¥ús·¥á\n\n**O·¥°…¥·¥á Ä: üà≤ @{Config.OWNER_USERNAME}**",
        quote=True,
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("C ü·¥ès·¥á üîê", callback_data="close")]]
        ),
    )



@mergeApp.on_message(
    (filters.document | filters.video | filters.audio) & filters.private
)
async def files_handler(c: Client, m: Message):
    Fsub = await ForceSub(c, m)
    if Fsub == 400:
        return
    user_id = m.from_user.id
    user = UserSettings(user_id, m.from_user.first_name)
    if user.merge_mode == 4: # extract_mode
        return
    input_ = f"downloads/{str(user_id)}/input.txt"
    if os.path.exists(input_):
        await m.reply_text("S·¥è Ä Ä è  ô Ä·¥è,\nA ü Ä·¥á·¥Ä·¥Ö è ·¥è…¥·¥á ·¥ò Ä·¥è·¥Ñ·¥áss …™…¥ ·¥ò Ä·¥è…¢ Ä·¥áss!\nD·¥è…¥'·¥õ s·¥ò·¥Ä·¥ç.")
        return
    media = m.video or m.document or m.audio
    if media.file_name is None:
        await m.reply_text("File Not Found")
        return
    currentFileNameExt = media.file_name.rsplit(sep=".")[-1].lower()
    if currentFileNameExt in "conf":
        await m.reply_text(
            text="**üíæ C·¥è…¥“ì…™…¢ “ì…™ ü·¥á “ì·¥è·¥ú…¥·¥Ö, D·¥è  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è s·¥Ä·¥†·¥á …™·¥õ?**",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton("‚úÖ Y·¥ás", callback_data=f"rclone_save"),
                        InlineKeyboardButton("‚ùå N·¥è", callback_data="rclone_discard"),
                    ]
                ]
            ),
            quote=True,
        )
        return
    # if MERGE_MODE.get(user_id) is None:
    #     userMergeMode = database.getUserMergeSettings(user_id)
    #     if userMergeMode is not None:
    #         MERGE_MODE[user_id] = userMergeMode
    #     else:
    #         database.setUserMergeMode(uid=user_id, mode=1)
    #         MERGE_MODE[user_id] = 1

    if user.merge_mode == 1:

        if queueDB.get(user_id, None) is None:
            formatDB.update({user_id: currentFileNameExt})
        if formatDB.get(
            user_id, None
        ) is not None and currentFileNameExt != formatDB.get(user_id):
            await m.reply_text(
                f"F…™ Äs·¥õ  è·¥è·¥ú s·¥á…¥·¥õ ·¥Ä {formatDB.get(user_id).upper()} “ì…™ ü·¥á s·¥è …¥·¥è·¥° s·¥á…¥·¥Ö ·¥è…¥ ü è ·¥õ ú·¥Ä·¥õ ·¥õ è·¥ò·¥á ·¥è“ì “ì…™ ü·¥á.",
                quote=True,
            )
            return
        if currentFileNameExt not in VIDEO_EXTENSIONS:
            await m.reply_text(
                "T ú…™s ·¥†…™·¥Ö·¥á·¥è “ì·¥è Ä·¥ç·¥Ä·¥õ …¥·¥è·¥õ ·¥Ä ü ü·¥è·¥°·¥á·¥Ö!\nO…¥ ü è s·¥á…¥·¥Ö MP4 ·¥è Ä MKV ·¥è Ä WEBM.",
                quote=True,
            )
            return
        editable = await m.reply_text("P ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ ...", quote=True)
        MessageText = "O·¥ã·¥Ä è,\nN·¥è·¥° s·¥á…¥·¥Ö ·¥ç·¥á …¥·¥áx·¥õ ·¥†…™·¥Ö·¥á·¥è ·¥è Ä ·¥ò Ä·¥áss **Merge Now**  ô·¥ú·¥õ·¥õ·¥è…¥!"

        if queueDB.get(user_id, None) is None:
            queueDB.update({user_id: {"videos": [], "subtitles": [], "audios": []}})
        if (
            len(queueDB.get(user_id)["videos"]) >= 0
            and len(queueDB.get(user_id)["videos"]) < 10
        ):
            queueDB.get(user_id)["videos"].append(m.id)
            queueDB.get(m.from_user.id)["subtitles"].append(None)

            # LOGGER.info(
            #     queueDB.get(user_id)["videos"], queueDB.get(m.from_user.id)["subtitles"]
            # )

            if len(queueDB.get(user_id)["videos"]) == 1:
                reply_ = await editable.edit(
                    "**S·¥á…¥·¥Ö ·¥ç·¥á s·¥è·¥ç·¥á ·¥ç·¥è Ä·¥á ·¥†…™·¥Ö·¥á·¥ès ·¥õ·¥è ·¥ç·¥á Ä…¢·¥á ·¥õ ú·¥á·¥ç …™…¥·¥õ·¥è s…™…¥…¢ ü·¥á “ì…™ ü·¥á**",
                    reply_markup=InlineKeyboardMarkup(
                        bMaker.makebuttons(["C·¥Ä…¥·¥Ñ·¥á ü"], ["cancel"])
                    ),
                )
                replyDB.update({user_id: reply_.id})
                return
            if queueDB.get(user_id, None)["videos"] is None:
                formatDB.update({user_id: currentFileNameExt})
            if replyDB.get(user_id, None) is not None:
                await c.delete_messages(
                    chat_id=m.chat.id, message_ids=replyDB.get(user_id)
                )
            if len(queueDB.get(user_id)["videos"]) == 10:
                MessageText = "O·¥ã·¥Ä è, …¥·¥è·¥° ·¥ä·¥ús·¥õ ·¥ò Ä·¥áss **Merge Now**  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥ò ü·¥èx!"
            markup = await makeButtons(c, m, queueDB)
            reply_ = await editable.edit(
                text=MessageText, reply_markup=InlineKeyboardMarkup(markup)
            )
            replyDB.update({user_id: reply_.id})
        elif len(queueDB.get(user_id)["videos"]) > 10:
            markup = await makeButtons(c, m, queueDB)
            await editable.text(
                "M·¥Äx ùü∑ùü∂ ·¥†…™·¥Ö·¥á·¥ès ·¥Ä ü ü·¥è·¥°·¥á·¥Ö", reply_markup=InlineKeyboardMarkup(markup)
            )

    elif user.merge_mode == 2:
        editable = await m.reply_text("P ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ ...", quote=True)
        MessageText = (
            "O·¥ã·¥Ä è,\nN·¥è·¥° s·¥á…¥·¥Ö ·¥ç·¥á s·¥è·¥ç·¥á ·¥ç·¥è Ä·¥á <u>Audios</u> ·¥è Ä ·¥ò Ä·¥áss **Merge Now**  ô·¥ú·¥õ·¥õ·¥è…¥!"
        )

        if queueDB.get(user_id, None) is None:
            queueDB.update({user_id: {"videos": [], "subtitles": [], "audios": []}})
        if len(queueDB.get(user_id)["videos"]) == 0:
            queueDB.get(user_id)["videos"].append(m.id)
            # if len(queueDB.get(user_id)["videos"])==1:
            reply_ = await editable.edit(
                text="N·¥è·¥°, s·¥á…¥·¥Ö ·¥Ä ü ü ·¥õ ú·¥á ·¥Ä·¥ú·¥Ö…™·¥ès  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥ç·¥á Ä…¢·¥á",
                reply_markup=InlineKeyboardMarkup(
                    bMaker.makebuttons(["C·¥Ä…¥·¥Ñ·¥á ü"], ["cancel"])
                ),
            )
            replyDB.update({user_id: reply_.id})
            return
        elif (
            len(queueDB.get(user_id)["videos"]) >= 1
            and currentFileNameExt in AUDIO_EXTENSIONS
        ):
            queueDB.get(user_id)["audios"].append(m.id)
            if replyDB.get(user_id, None) is not None:
                await c.delete_messages(
                    chat_id=m.chat.id, message_ids=replyDB.get(user_id)
                )
            markup = await makeButtons(c, m, queueDB)

            reply_ = await editable.edit(
                text=MessageText, reply_markup=InlineKeyboardMarkup(markup)
            )
            replyDB.update({user_id: reply_.id})
        else:
            await m.reply("T ú…™s “ì…™ ü·¥á·¥õ è·¥ò·¥á …™s …¥·¥è·¥õ ·¥†·¥Ä ü…™·¥Ö")
            return

    elif user.merge_mode == 3:

        editable = await m.reply_text("P ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ ...", quote=True)
        MessageText = "O·¥ã·¥Ä è,\nN·¥è·¥° s·¥á…¥·¥Ö ·¥ç·¥á s·¥è·¥ç·¥á ·¥ç·¥è Ä·¥á <u>Subtitles</u> ·¥è Ä ·¥ò Ä·¥áss **Merge Now**  ô·¥ú·¥õ·¥õ·¥è…¥!"
        if queueDB.get(user_id, None) is None:
            queueDB.update({user_id: {"videos": [], "subtitles": [], "audios": []}})
        if len(queueDB.get(user_id)["videos"]) == 0:
            queueDB.get(user_id)["videos"].append(m.id)
            # if len(queueDB.get(user_id)["videos"])==1:
            reply_ = await editable.edit(
                text="N·¥è·¥°, s·¥á…¥·¥Ö ·¥Ä ü ü ·¥õ ú·¥á s·¥ú ô·¥õ…™·¥õ ü·¥ás  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥ç·¥á Ä…¢·¥á",
                reply_markup=InlineKeyboardMarkup(
                    bMaker.makebuttons(["C·¥Ä…¥·¥Ñ·¥á ü"], ["cancel"])
                ),
            )
            replyDB.update({user_id: reply_.id})
            return
        elif (
            len(queueDB.get(user_id)["videos"]) >= 1
            and currentFileNameExt in SUBTITLE_EXTENSIONS
        ):
            queueDB.get(user_id)["subtitles"].append(m.id)
            if replyDB.get(user_id, None) is not None:
                await c.delete_messages(
                    chat_id=m.chat.id, message_ids=replyDB.get(user_id)
                )
            markup = await makeButtons(c, m, queueDB)

            reply_ = await editable.edit(
                text=MessageText, reply_markup=InlineKeyboardMarkup(markup)
            )
            replyDB.update({user_id: reply_.id})
        else:
            await m.reply("T ú…™s “ì…™ ü·¥á·¥õ è·¥ò·¥á …™s …¥·¥è·¥õ ·¥†·¥Ä ü…™·¥Ö")
            return


@mergeApp.on_message(filters.photo & filters.private)
async def photo_handler(c: Client, m: Message):
    Fsub = await ForceSub(c, m)
    if Fsub == 400:
        return
    user = UserSettings(m.chat.id, m.from_user.first_name)
    #if m.from_user.id != int(Config.OWNER):
    thumbnail = m.photo.file_id
    msg = await m.reply_text("S·¥Ä·¥†…™…¥…¢ ·¥õ ú·¥ú·¥ç ô…¥·¥Ä…™ ü. . . .", quote=True)
    user.thumbnail = thumbnail
    user.set()
    # await database.saveThumb(m.from_user.id, thumbnail)
    LOCATION = f"downloads/{m.from_user.id}_thumb.jpg"
    await c.download_media(message=m, file_name=LOCATION)
    await msg.edit_text(text="‚úÖ C·¥ús·¥õ·¥è·¥ç ·¥õ ú·¥ú·¥ç ô…¥·¥Ä…™ ü s·¥Ä·¥†·¥á·¥Ö!")
    del user


@mergeApp.on_message(filters.command(["extract"]) & filters.private)
async def media_extracter(c: Client, m: Message):
    Fsub = await ForceSub(c, m)
    if Fsub == 400:
        return
    user = UserSettings(uid=m.from_user.id, name=m.from_user.first_name)
    if not user.allowed:
        return
    if user.merge_mode == 4:
        if m.reply_to_message is None:
            await m.reply(text="R·¥á·¥ò ü è /extract ·¥õ·¥è ·¥Ä ·¥†…™·¥Ö·¥á·¥è ·¥è Ä ·¥Ö·¥è·¥Ñ·¥ú·¥ç·¥á…¥·¥õ “ì…™ ü·¥á")
            return
        rmess = m.reply_to_message
        if rmess.video or rmess.document:
            media = rmess.video or rmess.document
            mid=rmess.id
            file_name = media.file_name
            if file_name is None:
                await m.reply("F…™ ü·¥á …¥·¥Ä·¥ç·¥á …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö:)")
                return
            markup = bMaker.makebuttons(
                set1=["Audio", "Subtitle", "Cancel"],
                set2=[f"extract_audio_{mid}", f"extract_subtitle_{mid}", 'cancel'],
                isCallback=True,
                rows=2,
            )
            await m.reply(
                text="C ú·¥è·¥ès·¥á “ì Ä·¥è·¥ç  ô·¥á ü·¥è·¥° ·¥° ú·¥Ä·¥õ  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥áx·¥õ Ä·¥Ä·¥Ñ·¥õ?",
                quote=True,
                reply_markup=InlineKeyboardMarkup(markup),
            )
    else:
        await m.reply(
            text="C ú·¥Ä…¥…¢·¥á s·¥á·¥õ·¥õ…™…¥…¢s ·¥Ä…¥·¥Ö s·¥á·¥õ ·¥ç·¥è·¥Ö·¥á ·¥õ·¥è ·¥áx·¥õ Ä·¥Ä·¥Ñ·¥õ\n·¥õ ú·¥á…¥ ·¥ús·¥á /extract ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö"
        )


@mergeApp.on_message(filters.command(["help"]) & filters.private)
async def help_msg(c: Client, m: Message):
    Fsub = await ForceSub(c, m)
    if Fsub == 400:
        return
    await m.reply_text(
        text="""**F·¥è ü ü·¥è·¥° ·¥õ ú·¥ás·¥á s·¥õ·¥á·¥òs:

1) Send me the custom thumbnail (optional).
2) Send two or more Your Videos Which you want to merge
3) After sending all files select merge options
4) Select the upload mode.
5) Select rename if you want to give custom file name else press default**""",
        quote=True,
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("C ü·¥ès·¥á üîê", callback_data="close")]]
        ),
    )


@mergeApp.on_message(filters.command(["about"]) & filters.private)
async def about_handler(c: Client, m: Message):
    Fsub = await ForceSub(c, m)
    if Fsub == 400:
        return
    await m.reply_text(
        text="""
**W ú·¥Ä·¥õ's …¥·¥á·¥°:**
üë®‚Äçüíª B·¥Ä…¥/·¥ú…¥ ô·¥Ä…¥ ·¥ús·¥á Äs
üë®‚Äçüíª Ex·¥õ Ä·¥Ä·¥Ñ·¥õ ·¥Ä ü ü ·¥Ä·¥ú·¥Ö…™·¥ès ·¥Ä…¥·¥Ö s·¥ú ô·¥õ…™·¥õ ü·¥ás “ì Ä·¥è·¥ç ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç ·¥ç·¥á·¥Ö…™·¥Ä
üë®‚Äçüíª M·¥á Ä…¢·¥á ·¥†…™·¥Ö·¥á·¥è + ·¥Ä·¥ú·¥Ö…™·¥è 
üë®‚Äçüíª M·¥á Ä…¢·¥á ·¥†…™·¥Ö·¥á·¥è + s·¥ú ô·¥õ…™·¥õ ü·¥ás
üë®‚Äçüíª U·¥ò ü·¥è·¥Ä·¥Ö ·¥õ·¥è ·¥Ö Ä…™·¥†·¥á ·¥ús…™…¥…¢  è·¥è·¥ú Ä ·¥è·¥°…¥  Ä·¥Ñ ü·¥è…¥·¥á ·¥Ñ·¥è…¥“ì…™…¢
üë®‚Äçüíª M·¥á Ä…¢·¥á·¥Ö ·¥†…™·¥Ö·¥á·¥è ·¥ò Ä·¥ás·¥á Ä·¥†·¥ás ·¥Ä ü ü s·¥õ Ä·¥á·¥Ä·¥çs ·¥è“ì ·¥õ ú·¥á “ì…™ Äs·¥õ ·¥†…™·¥Ö·¥á·¥è  è·¥è·¥ú s·¥á…¥·¥Ö (…™.·¥á ·¥Ä ü ü ·¥Ä·¥ú·¥Ö…™·¥è·¥õ Ä·¥Ä·¥Ñ·¥ãs/s·¥ú ô·¥õ…™·¥õ ü·¥ás)
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
**F·¥á·¥Ä·¥õ·¥ú Ä·¥ás**
üî∞ M·¥á Ä…¢·¥á ·¥ú·¥ò·¥õ·¥è ùü∑ùü∂ ·¥†…™·¥Ö·¥á·¥è …™…¥ ·¥è…¥·¥á 
üî∞ U·¥ò ü·¥è·¥Ä·¥Ö ·¥Äs ·¥Ö·¥è·¥Ñ·¥ú·¥ç·¥á…¥·¥õs/·¥†…™·¥Ö·¥á·¥è
üî∞ C·¥ús·¥õ·¥è·¥çs ·¥õ ú·¥ú·¥ç ô…¥·¥Ä…™ ü s·¥ú·¥ò·¥ò·¥è Ä·¥õ
üî∞ Us·¥á Äs ·¥Ñ·¥Ä…¥  ü·¥è…¢…™…¥ ·¥õ·¥è  ô·¥è·¥õ ·¥ús…™…¥…¢ ·¥ò·¥Äss·¥°·¥è Ä·¥Ö
üî∞ O·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥Ä ü ü ·¥ús·¥á Äs
		""",
        quote=True,
        reply_markup=InlineKeyboardMarkup(
            [
                [
			InlineKeyboardButton("üë®‚Äçüíª D·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä", url="https://t.me/Movies_Zone_Media"),
		        InlineKeyboardButton("ü§î D·¥á·¥ò ü·¥è è·¥á·¥Ö  ô è", url=f"https://t.me/{Config.OWNER_USERNAME}")
		],
                [
			InlineKeyboardButton("C ü·¥ès·¥á üîê", callback_data="close")],
            ]
        ),
    )


@mergeApp.on_message(
    filters.command(["savethumb", "setthumb", "savethumbnail"]) & filters.private
)
async def save_thumbnail(c: Client, m: Message):
    Fsub = await ForceSub(c, m)
    if Fsub == 400:
        return
    if m.reply_to_message:
        if m.reply_to_message.photo:
            await photo_handler(c, m.reply_to_message)
        else:
            await m.reply(text="P ü·¥á·¥Äs·¥á  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥†·¥Ä ü…™·¥Ö ·¥ò ú·¥è·¥õ·¥è")
    else:
        await m.reply(text="P ü·¥á·¥Äs·¥á  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á")
    return


@mergeApp.on_message(filters.command(["showthumbnail"]) & filters.private)
async def show_thumbnail(c: Client, m: Message):
    try:
        user = UserSettings(m.from_user.id, m.from_user.first_name)
        thumb_id = user.thumbnail
        LOCATION = f"downloads/{str(m.from_user.id)}_thumb.jpg"
        if os.path.exists(LOCATION):
            await m.reply_photo(
                photo=LOCATION, caption="üñºÔ∏è Y·¥è·¥ú Ä ·¥Ñ·¥ús·¥õ·¥è·¥ç ·¥õ ú·¥ú·¥ç ô…¥·¥Ä…™ ü", quote=True
            )
        elif thumb_id is not None :
            await c.download_media(message=str(thumb_id), file_name=LOCATION)
            await m.reply_photo(
                photo=LOCATION, caption="üñºÔ∏è Y·¥è·¥ú Ä ·¥Ñ·¥ús·¥õ·¥è·¥ç ·¥õ ú·¥ú·¥ç ô…¥·¥Ä…™ ü", quote=True
            )
        else: 
            await m.reply_text(text="‚ùå C·¥ús·¥õ·¥è·¥ç ·¥õ ú·¥ú·¥ç ô…¥·¥Ä…™ ü …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö", quote=True)
        del user
    except Exception as err:
        LOGGER.info(err)
        await m.reply_text(text="‚ùå C·¥ús·¥õ·¥è·¥ç ·¥õ ú·¥ú·¥ç ô…¥·¥Ä…™ ü …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö", quote=True)


@mergeApp.on_message(filters.command(["deletethumbnail"]) & filters.private)
async def delete_thumbnail(c: Client, m: Message):
    try:
        user = UserSettings(m.from_user.id, m.from_user.first_name)
        user.thumbnail = None
        user.set()
        if os.path.exists(f"downloads/{str(m.from_user.id)}"):
            os.remove(f"downloads/{str(m.from_user.id)}")
            await m.reply_text("‚úÖ D·¥á ü·¥á·¥õ·¥á·¥Ö s·¥ú·¥Ñ·¥áss“ì·¥ú ü ü è", quote=True)
            del user
        else: raise Exception("T ú·¥ú·¥ç ô…¥·¥Ä…™ ü “ì…™ ü·¥á …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö")
    except Exception as err:
        await m.reply_text(text="‚ùå C·¥ús·¥õ·¥è·¥ç ·¥õ ú·¥ú·¥ç ô…¥·¥Ä…™ ü …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö", quote=True)

@mergeApp.on_message(filters.command(["ban","unban"]) & filters.private)
async def ban_user(c:Client,m:Message):
    incoming=m.text.split(' ')[0]
    if incoming == '/ban':
        if m.from_user.id == int(Config.OWNER):
            try:
                abuser_id = int(m.text.split(" ")[1])
                if abuser_id == int(Config.OWNER):
                    await m.reply_text("I ·¥Ñ·¥Ä…¥'·¥õ  ô·¥Ä…¥  è·¥è·¥ú ·¥ç·¥Äs·¥õ·¥á Ä,\nP ü·¥á·¥Äs·¥á ·¥Ö·¥è…¥'·¥õ ·¥Ä ô·¥Ä…¥·¥Ö·¥è…¥ ·¥ç·¥á. ",quote=True)
                else:
                    try:
                        user_obj: User = await c.get_users(abuser_id)
                        udata  = UserSettings(uid=abuser_id,name=user_obj.first_name)
                        udata.banned=True
                        udata.allowed=False
                        udata.set()
                        await m.reply_text(f"P·¥è·¥è·¥è“ì, {user_obj.first_name}  ú·¥Äs  ô·¥á·¥á…¥ **BANNED**",quote=True)
                        acknowledgement = f"""
Dear {user_obj.first_name},
I found your messages annoying and forwarded them to our team of moderators for inspection. The moderators have confirmed the report and your account is now banned.

While the account is banned, you will not be able to do certain things, like merging videos/audios/subtitles or extract audios from Telegram media.

Your account can be released only by @{Config.OWNER_USERNAME}."""
                        try:
                            await c.send_message(
                                chat_id=abuser_id,
                                text=acknowledgement
                            )
                        except Exception as e:
                            await m.reply_text(f"A…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä·¥á·¥Ö ·¥° ú…™ ü·¥á s·¥á…¥·¥Ö…™…¥…¢ ·¥Ä·¥Ñ·¥ã…¥·¥è·¥° ü·¥á·¥Ö…¢·¥á·¥ç·¥á…¥·¥õ\n\n`{e}`",quote=True)
                            LOGGER.error(e)
                    except Exception as e:
                        LOGGER.error(e)
            except:
                await m.reply_text("**C·¥è·¥ç·¥ç·¥Ä…¥·¥Ö:**\n  `/ban <user_id>`\n\n**Us·¥Ä…¢·¥á:**\n  `user_id`: Us·¥á Ä ID ·¥è“ì ·¥õ ú·¥á ·¥ús·¥á Ä",quote=True,parse_mode=enums.parse_mode.ParseMode.MARKDOWN)
        else:
            await m.reply_text("**(O…¥ ü è “ì·¥è Ä ·¥è·¥°…¥·¥á Ä ü´Öüèª)\nC·¥è·¥ç·¥ç·¥Ä…¥·¥Ö:**\n  `/ban <user_id>`\n\n**Us·¥Ä…¢·¥á:**\n  `user_id`: Us·¥á Ä ID ·¥è“ì ·¥õ ú·¥á ·¥ús·¥á Ä",quote=True,parse_mode=enums.parse_mode.ParseMode.MARKDOWN)
        return
    elif incoming == '/unban':
        if m.from_user.id == int(Config.OWNER):
            try:
                abuser_id = int(m.text.split(" ")[1])
                if abuser_id == int(Config.OWNER):
                    await m.reply_text("I ·¥Ñ·¥Ä…¥'·¥õ  ô·¥Ä…¥  è·¥è·¥ú ·¥ç·¥Äs·¥õ·¥á Ä,\nP ü·¥á·¥Äs·¥á ·¥Ö·¥è…¥'·¥õ ·¥Ä ô·¥Ä…¥·¥Ö·¥è…¥ ·¥ç·¥á. ",quote=True)
                else:
                    try:
                        user_obj: User = await c.get_users(abuser_id)
                        udata  = UserSettings(uid=abuser_id,name=user_obj.first_name)
                        udata.banned=False
                        udata.allowed=True
                        udata.set()
                        await m.reply_text(f"P·¥è·¥è·¥è“ì, {user_obj.first_name}  ú·¥Äs  ô·¥á·¥á…¥ **UN_BANNED**",quote=True)
                        release_notice = f"""
G·¥è·¥è·¥Ö …¥·¥á·¥°s {user_obj.first_name}, ·¥õ ú·¥á  ô·¥Ä…¥  ú·¥Äs  ô·¥á·¥á…¥ ·¥ú·¥ò ü…™“ì·¥õ·¥á·¥Ö ·¥è…¥  è·¥è·¥ú Ä ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ. Y·¥è·¥ú' Ä·¥á “ì Ä·¥á·¥á ·¥Äs ·¥Ä  ô…™ Ä·¥Ö!"""
                        try:
                            await c.send_message(
                                chat_id=abuser_id,
                                text=release_notice
                            )
                        except Exception as e:
                            await m.reply_text(f"A…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä·¥á·¥Ö ·¥° ú…™ ü·¥á s·¥á…¥·¥Ö…™…¥…¢  Ä·¥á ü·¥á·¥Äs·¥á …¥·¥è·¥õ…™·¥Ñ·¥á\n\n`{e}`",quote=True)
                            LOGGER.error(e)                      
                    except Exception as e:
                        LOGGER.error(e)
            except:
                await m.reply_text("**C·¥è·¥ç·¥ç·¥Ä…¥·¥Ö:**\n  `/unban <user_id>`\n\n**Us·¥Ä…¢·¥á:**\n  `user_id`: Us·¥á Ä ID ·¥è“ì ·¥õ ú·¥á ·¥ús·¥á Ä",quote=True,parse_mode=enums.parse_mode.ParseMode.MARKDOWN)
        else:
            await m.reply_text("**(O…¥ ü è “ì·¥è Ä ·¥è·¥°…¥·¥á Ä ü´Öüèª)\nC·¥è·¥ç·¥ç·¥Ä…¥·¥Ö:**\n  `/unban <user_id>`\n\n**Us·¥Ä…¢·¥á:**\n  `user_id`: Us·¥á Ä ID ·¥è“ì ·¥õ ú·¥á ·¥ús·¥á Ä",quote=True,parse_mode=enums.parse_mode.ParseMode.MARKDOWN)
        return
async def showQueue(c: Client, cb: CallbackQuery):
    try:
        markup = await makeButtons(c, cb.message, queueDB)
        await cb.message.edit(
            text="O·¥ã·¥Ä è,\nN·¥è·¥° s·¥á…¥·¥Ö ·¥ç·¥á …¥·¥áx·¥õ ·¥†…™·¥Ö·¥á·¥è ·¥è Ä ·¥ò Ä·¥áss **Merge Now**  ô·¥ú·¥õ·¥õ·¥è…¥!",
            reply_markup=InlineKeyboardMarkup(markup),
        )
    except ValueError:
        await cb.message.edit("S·¥á…¥·¥Ö s·¥è·¥ç·¥á ·¥ç·¥è Ä·¥á ·¥†…™·¥Ö·¥á·¥ès")
    return


async def delete_all(root):
    try:
        shutil.rmtree(root)
    except Exception as e:
        LOGGER.info(e)



	    
async def makeButtons(c: Client, m: Message, db: dict):
    Fsub = await ForceSub(c, m)
    if Fsub == 400:
        return
    markup = []
    user = UserSettings(m.chat.id, m.chat.first_name)
    if user.merge_mode == 1:
        for i in await c.get_messages(
            chat_id=m.chat.id, message_ids=db.get(m.chat.id)["videos"]
        ):
            media = i.video or i.document or None
            if media is None:
                continue
            else:
                markup.append(
                    [
                        InlineKeyboardButton(
                            f"{media.file_name}",
                            callback_data=f"showFileName_{i.id}",
                        )
                    ]
                )

    elif user.merge_mode == 2:
        msgs: list[Message] = await bot.get_messages(
            chat_id=m.chat.id, message_ids=db.get(m.chat.id)["audios"]
        )
        msgs.insert(
            0,
            await c.get_messages(
                chat_id=m.chat.id, message_ids=db.get(m.chat.id)["videos"][0]
            ),
        )
        for i in msgs:
            media = i.audio or i.document or i.video or None
            if media is None:
                continue
            else:
                markup.append(
                    [
                        InlineKeyboardButton(
                            f"{media.file_name}",
                            callback_data=f"tryotherbutton",
                        )
                    ]
                )

    elif user.merge_mode == 3:
        msgs: list[Message] = await c.get_messages(
            chat_id=m.chat.id, message_ids=db.get(m.chat.id)["subtitles"]
        )
        msgs.insert(
            0,
            await c.get_messages(
                chat_id=m.chat.id, message_ids=db.get(m.chat.id)["videos"][0]
            ),
        )
        for i in msgs:
            media = i.video or i.document or None

            if media is None:
                continue
            else:
                markup.append(
                    [
                        InlineKeyboardButton(
                            f"{media.file_name}",
                            callback_data=f"tryotherbutton",
                        )
                    ]
                )

    markup.append([InlineKeyboardButton("üóÇ M·¥á Ä…¢·¥á …¥·¥è·¥°", callback_data="merge")])
    markup.append([InlineKeyboardButton("üö´ C ü·¥á·¥Ä Ä “ì…™ ü·¥ás", callback_data="cancel")])
    return markup


LOGCHANNEL = Config.LOGCHANNEL
try:
    if Config.USER_SESSION_STRING is None:
        raise KeyError
    LOGGER.info("Starting USER Session")
    userBot = Client(
        name="merge-bot-user",
        session_string=Config.USER_SESSION_STRING,
        no_updates=True,
    )

except KeyError:
    userBot = None
    LOGGER.warning("N·¥è ·¥ús·¥á Ä s·¥áss…™·¥è…¥, D·¥á“ì·¥Ä·¥ú ü·¥õ  ô·¥è·¥õ s·¥áss…™·¥è…¥ ·¥°…™ ü ü  ô·¥á ·¥ús·¥á·¥Ö")


if __name__ == "__main__":
    # with mergeApp:
    #     bot:User = mergeApp.get_me()
    #     bot_username = bot.username
    try:
        with userBot:
            userBot.send_message(
                chat_id=int(LOGCHANNEL),
                text="B·¥è·¥õ  ô·¥è·¥è·¥õ·¥á·¥Ö ·¥°…™·¥õ ú ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ,\n\n  T ú·¥Ä…¥·¥ãs “ì·¥è Ä ·¥ús…™…¥…¢ <a href='https://t.me/Movies_Zone_Media'>·¥õ ú…™s  Ä·¥á·¥ò·¥è</a>",
                disable_web_page_preview=True,
            )
            user = userBot.get_me()
            Config.IS_PREMIUM = user.is_premium
    except Exception as err:
        LOGGER.error(f"{err}")
        Config.IS_PREMIUM = False
        pass

    mergeApp.run()
